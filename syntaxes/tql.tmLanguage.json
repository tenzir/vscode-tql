{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "TQL",
  "patterns": [
    {
      "include": "#root"
    }
  ],
  "fileTypes": [
    "tql"
  ],
  "foldingStartMarker": "\\{\\s*$",
  "foldingStopMarker": "^\\s*\\}",
  "repository": {
    "root": {
      "patterns": [
        {
          "comment": "TODO: Refactor keyword statements.",
          "begin": "(if|match)",
          "beginCaptures": {
            "0": {
              "name": "keyword"
            }
          },
          "patterns": [
            {
              "include": "#common"
            }
          ],
          "end": "(?=})|(?<!,\\s*)(?<!\\\\\\s*)(?=$)"
        },
        {
          "include": "#keywords"
        },
        {
          "name": "tql.operator_mode",
          "begin": "[a-zA-Z]\\w*(?=\\s)(?!\\s*=)",
          "beginCaptures": {
            "0": {
              "name": "entity.name.function"
            }
          },
          "patterns": [
            {
              "include": "#common"
            }
          ],
          "end": "(?=})|(?<!,\\s*)(?<!\\\\\\s*)(?=$)"
        },
        {
          "name": "tql.expression_mode",
          "begin": "(=|\\.)",
          "beginCaptures": {
            "0": {
              "name": "keyword"
            }
          },
          "patterns": [
            {
              "include": "#common"
            }
          ],
          "end": "(?<!,\\s*)\n$"
        },
        {
          "include": "#common"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword",
          "match": "(?<=\\b)(_|is|as|use|return|def|function|pipeline|let|and|or|in|not|let|this|meta|super|for|if|while|match|else)(?=\\b)",
          "comment": "type|"
        }
      ]
    },
    "common": {
      "patterns": [
        {
          "include": "#keywords"
        },
        {
          "name": "comment.line",
          "match": "//.*"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "tql.paren_expr",
          "patterns": [
            {
              "include": "#common"
            }
          ],
          "begin": "\\(",
          "end": "\\)"
        },
        {
          "name": "tql.brackets_expr",
          "patterns": [
            {
              "include": "#common"
            }
          ],
          "begin": "\\[",
          "end": "\\]"
        },
        {
          "name": "tql.braces_expr",
          "begin": "{",
          "end": "}",
          "patterns": [
            {
              "name": "tql.record_detected",
              "begin": "(?=\\w+:)",
              "patterns": [
                {
                  "include": "#keywords"
                },
                {
                  "name": "variable.other",
                  "match": "\\w+(?=:)"
                },
                {
                  "include": "#common"
                }
              ],
              "comment": "(?<!,\\s*)(?=$) <<-- REMOVE THIS",
              "end": "(?=})"
            },
            {
              "comment": "TODO: THIS IS COPIED FROM ABOVE",
              "name": "tql.braces_expr_is_pipeline",
              "begin": "(?!\\s|$)",
              "patterns": [
                {
                  "include": "#root"
                }
              ],
              "end": "(?=})"
            }
          ]
        },
        {
          "name": "constant.tql.time",
          "match": "[0-9]{4}-[0-9]{1,2}-[T0-9\\-+:Z]*"
        },
        {
          "name": "constant.tql.ipv4",
          "match": "[0-9]+\\.[0-9]+(\\.[0-9]+)*"
        },
        {
          "name": "constant.tql.ipv6",
          "match": "([0-9a-fA-F]*:){2,}[0-9a-fA-F]*(\\.[0-9]+|:[0-9a-fA-F]*)*"
        },
        {
          "name": "constant.numeric",
          "match": "[0-9][0-9_]*(\\.[0-9][0-9_]*)?([a-zA-Z_][a-zA-Z_0-9]*)?",
          "comment": "sign is not included because foo-42"
        },
        {
          "match": "(\\w+)(\\$|::)",
          "captures": {
            "0": {
              "name": "keyword"
            },
            "1": {
              "name": "entity.name"
            }
          }
        },
        {
          "name": "entity.name",
          "match": "\\w+(?='|\\$|#)",
          "comment": "\\w+(?=:|'|\\$|#)"
        },
        {
          "name": "tql.return_back_to_root",
          "begin": "(\\|)",
          "beginCaptures": {
            "0": {
              "name": "keyword"
            }
          },
          "patterns": [
            {
              "include": "#root"
            }
          ],
          "end": "(?=})|(?<!,\\s*)(?<!\\\\\\s*)(?=$)"
        },
        {
          "name": "string.quoted.double.tql",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.tql",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "keyword.operator",
          "match": "@|;|#|'|\\\\|\\+|-|\\*|/|:|&|=|>|<|\\?|!|\\."
        },
        {
          "name": "entity.name.function",
          "match": "\\w+(?=\\()"
        },
        {
          "name": "constant.language",
          "match": "(?<=\\b)(true|false|null)(?=\\b)"
        },
        {
          "name": "constant",
          "match": "(?<=')\\w+"
        },
        {
          "name": "constant",
          "match": "\\$\\w+"
        },
        {
          "name": "entity.name",
          "match": "@\\w+"
        },
        {
          "name": "keyword.operator",
          "match": "\\$"
        },
        {
          "name": "variable.other",
          "match": "\\w+"
        }
      ]
    }
  },
  "scopeName": "text.tql"
}
