{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "TQL",
  "patterns": [
    {
      "include": "#pipeline"
    },
    {
      "include": "#pipeline"
    }
  ],
  "fileTypes": [
    "tql"
  ],
  "repository": {
    "string-double": {
      "name": "string.quoted.double.tql",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.tql",
          "match": "\\\\."
        }
      ]
    },
    "string-single": {
      "name": "string.quoted.single.tql",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.tql",
          "match": "\\\\."
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "include": "#string-double"
        },
        {
          "include": "#string-single"
        }
      ]
    },
    "pipeline": {
      "name": "meta.structure.pipeline.tql",
      "patterns": [
        {
          "include": "#operator"
        },
        {
          "match": "\\|",
          "name": "keyword.operator.pipe.tql"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "operator": {
      "name": "meta.operator.tql",
      "begin": "(\\w+)",
      "end": "\\|",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.tql"
        }
      },
      "patterns": [
        {
          "include": "#parameters"
        }
      ]
    },
    "parameters": {
      "name": "meta.operator.parameters.tql",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "atom": {
      "patterns": [
        {
          "include": "#words"
        },
        {
          "include": "#ip"
        },
        {
          "include": "#number"
        },
        {
          "include": "#strings"
        }
      ]
    },
    "list": {
      "name": "meta.structure.list.tql",
      "begin": "\\[",
      "beginCaptures": {
        "0": {
          "name": "keyword.operator.list.begin.tql"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "keyword.operator.list.end.tql"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        },
        {
          "match": ",",
          "name": "keyword.operator.list.separator.tql"
        },
        {
          "match": "[^\\s\\]]",
          "name": "invalid.illegal.expected-list-separator.tql"
        }
      ]
    },
    "expression": {
      "name": "expression",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "match": "\\w+(?=\\()",
          "name": "entity.name.function.tql"
        },
        {
          "match": "=|\\+|-|/|\\.|<|>|<=|>=|==|!=|&&|\\|\\||!",
          "name": "keyword.operator.tql"
        },
        {
          "match": "\\b(in|ni)\\b",
          "name": "keyword.operator.in.tql"
        },
        {
          "include": "#list"
        },
        {
          "include": "#atom"
        }
      ]
    },
    "words": {
      "name": "entity.tql",
      "patterns": [
        {
          "match": "\\b(null|true|false)\\b",
          "name": "constant.language.tql"
        },
        {
          "match": "\\b(none|bool|int64|uint64|double|duration|time|string|pattern|ip|subnet|list|record)\\b",
          "name": "storage.type.tql"
        },
        {
          "match": "[a-zA-Z_][a-zA-Z-_0-9]*",
          "name": "entity.name.word.tql"
        },
        {
          "match": "#[a-zA-Z-_\\.]+",
          "name": "entity.name.selector.meta.tql"
        },
        {
          "match": ":[a-zA-Z-_\\.]+",
          "name": "entity.name.selector.selector.tql"
        }
      ]
    },
    "number": {
      "name": "constant.numeric.tql",
      "match": "([-+]?)(\\d+)(\\.\\d+([eE][+-]?\\d+)?)?"
    },
    "ip": {
      "patterns": [
        {
          "name": "constant.numeric.ip.v4.tql",
          "match": "((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])"
        },
        {
          "name": "constant.numeric.ip.v6.tql",
          "match": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))"
        }
      ]
    },
    "line_comment": {
      "name": "comment.line.double-slash.tql",
      "match": "(//).*$\\n?",
      "captures": {
        "1": {
          "name": "punctuation.definition.comment.tql"
        }
      }
    },
    "block_comment": {
      "name": "comment.block.tql",
      "begin": "/\\*",
      "end": "\\*/",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.comment.tql"
        }
      }
    },
    "comments": {
      "patterns": [
        {
          "include": "#line_comment"
        },
        {
          "include": "#block_comment"
        }
      ]
    }
  },
  "scopeName": "text.tql"
}
